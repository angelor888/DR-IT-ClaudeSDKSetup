#!/bin/bash
#
# OAuth Setup Helper Script
# Guides through setting up OAuth for all MCP services
#

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

ENV_FILE="$HOME/.config/claude/environment"

echo -e "${BLUE}🔐 Claude MCP OAuth Setup Helper${NC}"
echo "=================================="
echo ""
echo "This script will help you add OAuth tokens to your environment."
echo "Have your tokens ready from the OAuth setup guide."
echo ""

# Function to check if token exists
check_token() {
    local var_name="$1"
    if grep -q "export $var_name=" "$ENV_FILE" 2>/dev/null && grep "export $var_name=" "$ENV_FILE" | grep -qv '=""'; then
        return 0
    else
        return 1
    fi
}

# Function to add or update token
add_token() {
    local var_name="$1"
    local var_description="$2"
    local current_value=""
    
    # Check if already configured
    if check_token "$var_name"; then
        current_value=$(grep "export $var_name=" "$ENV_FILE" | cut -d'"' -f2)
        echo -e "${GREEN}✓${NC} $var_name is already configured"
        echo -n "  Current value: ${current_value:0:10}... Update? (y/N): "
        read -r update_choice
        if [[ ! "$update_choice" =~ ^[Yy]$ ]]; then
            return
        fi
    fi
    
    echo -e "\n${YELLOW}$var_description${NC}"
    echo -n "Enter $var_name: "
    read -r token_value
    
    if [ -z "$token_value" ]; then
        echo -e "${RED}Skipped (no value provided)${NC}"
        return
    fi
    
    # Remove existing line if present
    if grep -q "export $var_name=" "$ENV_FILE" 2>/dev/null; then
        sed -i.bak "/export $var_name=/d" "$ENV_FILE"
    fi
    
    # Add new token
    echo "export $var_name=\"$token_value\"" >> "$ENV_FILE"
    echo -e "${GREEN}✓ Added $var_name${NC}"
}

# Create environment file if it doesn't exist
if [ ! -f "$ENV_FILE" ]; then
    mkdir -p "$(dirname "$ENV_FILE")"
    touch "$ENV_FILE"
    chmod 600 "$ENV_FILE"
    echo "#!/bin/bash" > "$ENV_FILE"
    echo "# Claude MCP Service Environment Variables" >> "$ENV_FILE"
    echo "# Generated by oauth-setup.sh" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
fi

# Backup current environment
cp "$ENV_FILE" "$ENV_FILE.backup.$(date +%Y%m%d_%H%M%S)"
echo -e "${GREEN}✓ Created backup of environment file${NC}"

echo -e "\n${BLUE}1. GitHub Configuration${NC}"
echo "========================"
echo "Get token from: https://github.com/settings/tokens"
echo "Required scopes: repo, read:org, read:user, read:project"
add_token "GITHUB_TOKEN" "GitHub Personal Access Token"

echo -e "\n${BLUE}2. Google Services Configuration${NC}"
echo "================================="
echo "Create OAuth client at: https://console.cloud.google.com"
echo "Enable APIs: Google Calendar API, Gmail API, Google Drive API"
add_token "GOOGLE_CLIENT_ID" "Google OAuth Client ID (ends with .apps.googleusercontent.com)"
add_token "GOOGLE_CLIENT_SECRET" "Google OAuth Client Secret"

echo -e "\n${YELLOW}Using same Google credentials for Gmail and Drive? (Y/n):${NC} "
read -r use_same_google
if [[ ! "$use_same_google" =~ ^[Nn]$ ]]; then
    # Copy Google credentials to Gmail/Drive variables
    google_client_id=$(grep "export GOOGLE_CLIENT_ID=" "$ENV_FILE" | cut -d'"' -f2)
    google_client_secret=$(grep "export GOOGLE_CLIENT_SECRET=" "$ENV_FILE" | cut -d'"' -f2)
    
    if [ -n "$google_client_id" ] && [ -n "$google_client_secret" ]; then
        sed -i.bak "/export GMAIL_CLIENT_ID=/d" "$ENV_FILE" 2>/dev/null || true
        sed -i.bak "/export GMAIL_CLIENT_SECRET=/d" "$ENV_FILE" 2>/dev/null || true
        sed -i.bak "/export GOOGLE_DRIVE_CLIENT_ID=/d" "$ENV_FILE" 2>/dev/null || true
        sed -i.bak "/export GOOGLE_DRIVE_CLIENT_SECRET=/d" "$ENV_FILE" 2>/dev/null || true
        
        echo "export GMAIL_CLIENT_ID=\"$google_client_id\"" >> "$ENV_FILE"
        echo "export GMAIL_CLIENT_SECRET=\"$google_client_secret\"" >> "$ENV_FILE"
        echo "export GOOGLE_DRIVE_CLIENT_ID=\"$google_client_id\"" >> "$ENV_FILE"
        echo "export GOOGLE_DRIVE_CLIENT_SECRET=\"$google_client_secret\"" >> "$ENV_FILE"
        
        echo -e "${GREEN}✓ Copied Google credentials to Gmail and Drive${NC}"
    fi
else
    add_token "GMAIL_CLIENT_ID" "Gmail OAuth Client ID"
    add_token "GMAIL_CLIENT_SECRET" "Gmail OAuth Client Secret"
    add_token "GOOGLE_DRIVE_CLIENT_ID" "Google Drive OAuth Client ID"
    add_token "GOOGLE_DRIVE_CLIENT_SECRET" "Google Drive OAuth Client Secret"
fi

echo -e "\n${BLUE}3. QuickBooks Configuration${NC}"
echo "============================"
echo "Create app at: https://developer.intuit.com"
add_token "QUICKBOOKS_CONSUMER_KEY" "QuickBooks Consumer Key"
add_token "QUICKBOOKS_CONSUMER_SECRET" "QuickBooks Consumer Secret"
echo -e "${YELLOW}Note: Access tokens will be generated after OAuth flow${NC}"

echo -e "\n${BLUE}4. Notion Configuration${NC}"
echo "========================"
echo "Create integration at: https://www.notion.so/my-integrations"
add_token "NOTION_TOKEN" "Notion Internal Integration Token"

echo -e "\n${BLUE}5. Other API Services${NC}"
echo "======================"

echo -e "\n${YELLOW}OpenAI${NC}"
echo "Get key from: https://platform.openai.com/api-keys"
add_token "OPENAI_API_KEY" "OpenAI API Key"

echo -e "\n${YELLOW}Airtable${NC}"
echo "Get token from: https://airtable.com/create/tokens"
add_token "AIRTABLE_API_KEY" "Airtable Personal Access Token"

echo -e "\n${YELLOW}SendGrid${NC}"
echo "Get key from: https://app.sendgrid.com/settings/api_keys"
add_token "SENDGRID_API_KEY" "SendGrid API Key"

echo -e "\n${YELLOW}Cloudflare${NC}"
echo "Get token from: https://dash.cloudflare.com/profile/api-tokens"
add_token "CLOUDFLARE_API_TOKEN" "Cloudflare API Token"

echo -e "\n${YELLOW}Firecrawl${NC}"
echo "Get key from: https://www.firecrawl.dev"
add_token "FIRECRAWL_API_KEY" "Firecrawl API Key"

echo -e "\n${YELLOW}Tavily${NC}"
echo "Get key from: https://tavily.com"
add_token "TAVILY_API_KEY" "Tavily API Key"

echo -e "\n${YELLOW}Neon Database${NC}"
echo "Get key from: https://console.neon.tech"
add_token "NEON_API_KEY" "Neon API Key"

echo -e "\n${YELLOW}Matterport${NC}"
echo "Get key from: https://developers.matterport.com"
add_token "MATTERPORT_API_KEY" "Matterport API Key"

echo -e "\n${YELLOW}Confluence${NC}"
echo "Create token at: https://id.atlassian.com/manage-profile/security/api-tokens"
add_token "CONFLUENCE_API_TOKEN" "Confluence API Token"

# Set proper permissions
chmod 600 "$ENV_FILE"

echo -e "\n${BLUE}Setup Summary${NC}"
echo "=============="

# Count configured tokens
total_tokens=0
configured_tokens=0
for token in GITHUB_TOKEN GOOGLE_CLIENT_ID GMAIL_CLIENT_ID GOOGLE_DRIVE_CLIENT_ID \
             QUICKBOOKS_CONSUMER_KEY NOTION_TOKEN OPENAI_API_KEY AIRTABLE_API_KEY \
             SENDGRID_API_KEY CLOUDFLARE_API_TOKEN FIRECRAWL_API_KEY TAVILY_API_KEY \
             NEON_API_KEY MATTERPORT_API_KEY CONFLUENCE_API_TOKEN; do
    ((total_tokens++))
    if check_token "$token"; then
        ((configured_tokens++))
        echo -e "${GREEN}✓${NC} $token"
    else
        echo -e "${RED}✗${NC} $token"
    fi
done

echo -e "\nConfigured: ${GREEN}$configured_tokens${NC}/$total_tokens tokens"

echo -e "\n${BLUE}Next Steps${NC}"
echo "==========="
echo "1. For Google Drive refresh token, run:"
echo "   ${GREEN}/Users/angelone/Projects/DR-IT-ClaudeSDKSetup/scripts/google-oauth-flow.py${NC}"
echo ""
echo "2. Restart MCP Docker containers:"
echo "   ${GREEN}docker-compose -f ~/mcp-services/docker-compose.yml restart${NC}"
echo ""
echo "3. Validate OAuth connections:"
echo "   ${GREEN}/Users/angelone/Projects/DR-IT-ClaudeSDKSetup/scripts/validate-oauth.sh${NC}"

echo -e "\n${GREEN}✓ OAuth setup helper completed!${NC}"