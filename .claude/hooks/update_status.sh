#!/bin/bash

# Claude Code Task Completion Hook
# Updates project status and optionally sends notifications

set -euo pipefail

# Configuration
PROJECT_NAME="DR-SETUP-DEV-ClaudeSDKEnvironment-v1.0-20250708"
STATUS_FILE=".claude/logs/status.json"
CLAUDE_MD_FILE="Claude.md"
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_message() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

update_status() {
    local task_type=${1:-"unknown"}
    local status=${2:-"completed"}
    local message=${3:-"Task completed successfully"}
    
    # Create status entry
    local status_entry=$(cat <<EOF
{
  "timestamp": "$TIMESTAMP",
  "task_type": "$task_type",
  "status": "$status",
  "message": "$message",
  "project": "$PROJECT_NAME",
  "git_branch": "$(git branch --show-current 2>/dev/null || echo 'unknown')",
  "git_commit": "$(git rev-parse HEAD 2>/dev/null || echo 'unknown')"
}
EOF
)
    
    # Append to status log
    mkdir -p .claude/logs
    echo "$status_entry" >> "$STATUS_FILE"
    
    log_message "Status updated: $status - $message"
}

update_claude_md() {
    local task_summary=${1:-"Task completed"}
    
    # Create a backup
    cp "$CLAUDE_MD_FILE" ".claude/backups/Claude-backup-$(date +%Y%m%d-%H%M%S).md"
    
    # Add task completion entry
    local update_entry="
### Task Completion - $(date '+%Y-%m-%d %H:%M:%S')
- **Status**: Completed
- **Summary**: $task_summary
- **Branch**: $(git branch --show-current 2>/dev/null || echo 'unknown')
- **Commit**: $(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')
"
    
    # Insert before the auto-update comment
    sed -i.bak '/<!-- This section will be automatically updated/i\\
'"$update_entry"'
' "$CLAUDE_MD_FILE"
    
    log_message "Claude.md updated with task completion"
}

play_notification_sound() {
    local sound_type=${1:-"completion"}
    local sound_file=".claude/sounds/${sound_type}.wav"
    
    if [[ -f "$sound_file" ]]; then
        if command -v afplay >/dev/null 2>&1; then
            afplay "$sound_file" 2>/dev/null &
            log_message "Playing notification sound: $sound_type"
        elif command -v paplay >/dev/null 2>&1; then
            paplay "$sound_file" 2>/dev/null &
            log_message "Playing notification sound: $sound_type"
        else
            log_message "No audio player found for notification sound"
        fi
    else
        log_message "Notification sound file not found: $sound_file"
    fi
}

send_system_notification() {
    local title=${1:-"Claude Code"}
    local message=${2:-"Task completed successfully"}
    
    if command -v osascript >/dev/null 2>&1; then
        osascript -e "display notification \"$message\" with title \"$title\""
        log_message "System notification sent"
    elif command -v notify-send >/dev/null 2>&1; then
        notify-send "$title" "$message"
        log_message "System notification sent"
    else
        log_message "No notification system found"
    fi
}

generate_project_summary() {
    local summary_file=".claude/logs/project-summary.md"
    
    cat > "$summary_file" <<EOF
# Project Summary - $(date '+%Y-%m-%d %H:%M:%S')

## Current Status
- **Project**: $PROJECT_NAME
- **Branch**: $(git branch --show-current 2>/dev/null || echo 'unknown')
- **Last Commit**: $(git log -1 --pretty=format:'%h - %s (%cr)' 2>/dev/null || echo 'unknown')
- **Files Modified**: $(git status --porcelain 2>/dev/null | wc -l | tr -d ' ')

## Recent Activity
$(tail -n 5 "$STATUS_FILE" 2>/dev/null | jq -r '.message' 2>/dev/null || echo "No recent activity")

## Next Steps
- Check .claude/logs/status.json for detailed task history
- Review Claude.md for updated context
- Run git status to see current changes

---
Generated by Claude Code Task Completion Hook
EOF
    
    log_message "Project summary generated: $summary_file"
}

# Main execution
main() {
    local task_type=${1:-"general"}
    local status=${2:-"completed"}
    local message=${3:-"Task completed successfully"}
    
    log_message "Task completion hook started"
    
    # Update status tracking
    update_status "$task_type" "$status" "$message"
    
    # Update project documentation
    update_claude_md "$message"
    
    # Play notification sound
    play_notification_sound "completion"
    
    # Send system notification
    send_system_notification "Claude Code - $PROJECT_NAME" "$message"
    
    # Generate project summary
    generate_project_summary
    
    log_message "Task completion hook finished"
}

# Execute main function with arguments
main "$@"