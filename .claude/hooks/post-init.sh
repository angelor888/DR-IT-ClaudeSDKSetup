#!/bin/bash

# Post-init Hook - Runs after Claude Code initialization

set -euo pipefail

# Configuration
CLAUDE_DIR=".claude"
CLAUDE_MD="Claude.md"
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_message() {
    echo -e "${BLUE}[post-init] $1${NC}" >&2
}

log_success() {
    echo -e "${GREEN}[post-init] $1${NC}" >&2
}

log_warning() {
    echo -e "${YELLOW}[post-init] $1${NC}" >&2
}

log_error() {
    echo -e "${RED}[post-init] $1${NC}" >&2
}

# Validate initialization
validate_initialization() {
    log_message "Validating initialization..."
    
    local validation_errors=()
    
    # Check Claude.md exists
    if [[ ! -f "$CLAUDE_MD" ]]; then
        validation_errors+=("Claude.md not found")
    fi
    
    # Check .claude structure
    if [[ ! -d "$CLAUDE_DIR" ]]; then
        validation_errors+=(".claude directory not found")
    fi
    
    # Check essential scripts
    if [[ ! -f "$CLAUDE_DIR/scripts/auto-init.sh" ]]; then
        validation_errors+=("auto-init.sh script not found")
    fi
    
    if [[ ! -f "$CLAUDE_DIR/scripts/memory-sync.sh" ]]; then
        validation_errors+=("memory-sync.sh script not found")
    fi
    
    # Check settings
    if [[ ! -f "$CLAUDE_DIR/settings/settings.json" ]]; then
        validation_errors+=("settings.json not found")
    fi
    
    if [[ ${#validation_errors[@]} -gt 0 ]]; then
        log_error "Validation failed:"
        for error in "${validation_errors[@]}"; do
            log_error "  - $error"
        done
        exit 1
    fi
    
    log_success "Initialization validation passed"
}

# Setup file permissions
setup_permissions() {
    log_message "Setting up file permissions..."
    
    # Make scripts executable
    find "$CLAUDE_DIR" -name "*.sh" -exec chmod +x {} \;
    
    # Set proper permissions for sensitive files
    if [[ -f "$CLAUDE_DIR/settings/settings.json" ]]; then
        chmod 644 "$CLAUDE_DIR/settings/settings.json"
    fi
    
    # Set log file permissions
    if [[ -f "$CLAUDE_DIR/logs/claude.log" ]]; then
        chmod 644 "$CLAUDE_DIR/logs/claude.log"
    fi
    
    log_success "File permissions configured"
}

# Create welcome message
create_welcome_message() {
    log_message "Creating welcome message..."
    
    local project_name=$(basename "$(pwd)")
    
    cat > "$CLAUDE_DIR/WELCOME.md" <<EOF
# Welcome to Claude Code Enhanced Environment

## Project: $project_name
**Initialized**: $(date '+%Y-%m-%d %H:%M:%S')

### 🚀 Quick Start
- Use \`/init\` to re-initialize project context
- Use \`/gsave\` for intelligent git commits
- Use \`/design-iterate\` for UI design workflows
- Use \`/project-settings\` to configure project settings

### 📁 Project Structure
\`\`\`
.claude/
├── scripts/          # Automation scripts
├── hooks/           # Event hooks
├── commands/        # Custom slash commands
├── settings/        # Configuration files
├── logs/           # Activity logs
├── backups/        # Backup files
├── memory/         # Session memory
├── sounds/         # Notification sounds
└── templates/      # Project templates
\`\`\`

### 🔧 Features Enabled
- ✅ Auto-initialization on new projects
- ✅ Persistent memory management
- ✅ Git worktree support for parallel operations
- ✅ Custom slash commands
- ✅ Project context awareness
- ✅ Audio notifications
- ✅ File change monitoring

### 📖 Documentation
- **Claude.md**: Project context and memory
- **Settings**: \`.claude/settings/settings.json\`
- **Logs**: \`.claude/logs/claude.log\`
- **Memory**: \`.claude/memory/\`

### 🎯 Next Steps
1. Review \`Claude.md\` for project context
2. Customize settings in \`.claude/settings/settings.json\`
3. Explore custom commands in \`.claude/commands/\`
4. Set up project-specific workflows

---
Generated by Claude Code Enhanced Environment
EOF
    
    log_success "Welcome message created"
}

# Initialize memory system
initialize_memory_system() {
    log_message "Initializing memory system..."
    
    # Run memory sync to establish baseline
    if [[ -f "$CLAUDE_DIR/scripts/memory-sync.sh" ]]; then
        "$CLAUDE_DIR/scripts/memory-sync.sh" sync
        log_success "Memory system initialized"
    else
        log_warning "Memory sync script not found"
    fi
}

# Create project summary
create_project_summary() {
    log_message "Creating project summary..."
    
    local project_name=$(basename "$(pwd)")
    local git_branch="unknown"
    local git_commit="unknown"
    
    if git rev-parse --git-dir >/dev/null 2>&1; then
        git_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
        git_commit=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
    fi
    
    cat > "$CLAUDE_DIR/PROJECT-SUMMARY.md" <<EOF
# Project Summary - $project_name

## Initialization Details
- **Date**: $(date '+%Y-%m-%d %H:%M:%S')
- **Branch**: $git_branch
- **Commit**: $git_commit
- **Claude Version**: $(claude --version 2>/dev/null || echo 'unknown')

## Project Analysis
$(if [[ -f "package.json" ]]; then
    echo "- **Type**: Node.js project"
    echo "- **Dependencies**: $(jq -r '.dependencies | keys | length' package.json 2>/dev/null || echo '0') packages"
elif [[ -f "requirements.txt" ]]; then
    echo "- **Type**: Python project"
    echo "- **Dependencies**: $(wc -l < requirements.txt 2>/dev/null || echo '0') packages"
elif [[ -f "Cargo.toml" ]]; then
    echo "- **Type**: Rust project"
elif [[ -f "go.mod" ]]; then
    echo "- **Type**: Go project"
else
    echo "- **Type**: General project"
fi)

## Directory Structure
\`\`\`
$(find . -type d -name ".*" -prune -o -type d -print | head -10 | sort)
\`\`\`

## Key Files
$(find . -maxdepth 2 -name "*.md" -o -name "*.json" -o -name "*.yaml" -o -name "*.yml" | head -10 | sort)

## Next Actions
- [ ] Review Claude.md for project context
- [ ] Customize .claude/settings/settings.json
- [ ] Set up project-specific workflows
- [ ] Configure IDE integration
- [ ] Add project documentation

---
Generated by Claude Code Post-Init Hook
EOF
    
    log_success "Project summary created"
}

# Log completion
log_completion() {
    log_message "Logging completion..."
    
    # Add completion entry to log
    cat >> "$CLAUDE_DIR/logs/claude.log" <<EOF
[$TIMESTAMP] Post-init hook completed
[$TIMESTAMP] Project initialized successfully
[$TIMESTAMP] Welcome message created
[$TIMESTAMP] Memory system initialized
[$TIMESTAMP] Project summary generated
EOF
    
    log_success "Completion logged"
}

# Main execution
main() {
    log_message "Starting post-init hook..."
    
    validate_initialization
    setup_permissions
    create_welcome_message
    initialize_memory_system
    create_project_summary
    log_completion
    
    log_success "Post-init hook completed successfully"
    log_success "🎉 Claude Code Enhanced Environment is ready!"
}

# Execute main function
main "$@"